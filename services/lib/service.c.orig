#include "service.h"

struct in_packet_buffer *in_buffer;

int prod=0;
int cons=0;

void producer_service(struct seg6_sock *sk, struct nlattr **attrs, struct nlmsghdr* nlh) {
    struct wrapper *el;
    struct in_packet_buffer *buf;
    int pkt_len;
    char *pkt_data;

    buf = in_buffer;

    pkt_len = nla_get_u32(attrs[SEG6_ATTR_PACKET_LEN]);
    pkt_data = nla_data(attrs[SEG6_ATTR_PACKET_DATA]);

    producer_pc_wait(buf);

    el = buf->buffer + buf->writepos;
    el->attrs = attrs;
    el->nlh = nlh;
    advance_wr_pos(buf);

    //printf("Prod (%p) %d: %p %p \n", el, pkt_len, attrs, nlh);
    prod++;

    producer_pc_post(buf);
}

void *consumer_service(void * args) {
    struct in_packet_buffer *buf;
    struct wrapper *el;
    struct seg6_sock *sk, *sk_in;

    struct nlattr **attrs;
    struct nlmsghdr* nlh;
    struct nl_mmap_hdr *hdr;

    int pkt_len;
    char *pkt_data;

    sk = seg6_socket_create(128*getpagesize(), 64);

    service_t *service = (service_t *) args;

    // FIXME
    buf = in_buffer;
    sk_in = buf->sk;

    for(;;) {
        consumer_pc_wait(buf);

        el = buf->buffer + buf->readpos;
        attrs = el->attrs;
        nlh = el->nlh;
        advance_rd_pos(buf);
        cons++;

        consumer_pc_post(buf);

        pkt_len = nla_get_u32(attrs[SEG6_ATTR_PACKET_LEN]);
        pkt_data = nla_data(attrs[SEG6_ATTR_PACKET_DATA]);

        //printf("Cons (%p) %d: %p %p\n", el, pkt_len, attrs, nlh);
        service(sk, attrs, nlh);

        //printf("take hdr");
        hdr = ((void *)nlh - NL_MMAP_HDRLEN);
        //printf("unused (cons)\n");
        hdr->nm_status = NL_MMAP_STATUS_UNUSED;

        //printf("Status: %d %p\n", hdr->nm_status, hdr);

        //printf("%d vs %d\n", prod, cons);

        free(attrs);
    }
}

void forward_service(struct seg6_sock *sk, struct nlattr **attrs, struct nlmsghdr *nlh) {
    int pkt_len;
    char *pkt_data;

    pkt_len = nla_get_u32(attrs[SEG6_ATTR_PACKET_LEN]);
    pkt_data = nla_data(attrs[SEG6_ATTR_PACKET_DATA]);

    send_ip6_packet(sk, pkt_len, pkt_data);
}

int threaded_synchrone_service_launch(struct seg6_sock *sk, struct in6_addr *in6,
        nlmem_cb_t nlmem_callback, service_t seg6_callback, int nbr_thread) {
    return threaded_service_launch(sk, in6, nlmem_callback, seg6_callback, nbr_thread, 0);
}

int threaded_asynchrone_service_launch(struct seg6_sock *sk, struct in6_addr *in6,
        nlmem_cb_t nlmem_callback, service_t seg6_callback, int nbr_thread) {
    return threaded_service_launch(sk, in6, nlmem_callback, seg6_callback, nbr_thread, 0x1);
}


int threaded_service_launch(struct seg6_sock *sk, struct in6_addr *in6,
        nlmem_cb_t nlmem_callback, service_t seg6_callback, int nbr_thread, int type ) {

    struct nlmsghdr *msg;
    struct nlmem_cb cb;
	pthread_t * threads;
    int i, res;

    init_pc_buffer(&in_buffer);
    in_buffer->sk = sk;

    sk->nlm_sk->delayed_release = 1;

    threads = (pthread_t *) malloc(nbr_thread*sizeof (pthread_t));
    for(i=0; i<nbr_thread; i++)
        pthread_create(threads+i, NULL, &consumer_service, (void *) seg6_callback);

    res = service_launch(sk, in6, nlmem_callback, &producer_service, type);

    for(i=0; i<nbr_thread; i++)
        pthread_join(threads[i], NULL);

    free(threads);

    return res;
}



int synchrone_service_launch(struct seg6_sock *sk, struct in6_addr *in6,
        nlmem_cb_t nlmem_callback, service_t seg6_callback) {

    return service_launch(sk, in6, nlmem_callback, seg6_callback, 0);
}

int asynchrone_service_launch(struct seg6_sock *sk, struct in6_addr *in6,
        nlmem_cb_t nlmem_callback, service_t seg6_callback){

    return service_launch(sk, in6, nlmem_callback, seg6_callback, 0x1);
}

int service_launch(struct seg6_sock *sk, struct in6_addr *in6,
        nlmem_cb_t nlmem_callback, service_t seg6_callback, int type ) {

    struct nlmsghdr *msg;
    struct nlmem_cb cb;

    seg6_set_callback(sk, SEG6_CMD_PACKET_IN, seg6_callback);
    msg = nlmem_msg_create(sk->nlm_sk, SEG6_CMD_ADDBIND, NLM_F_REQUEST);

    nlmem_nla_put(sk->nlm_sk, msg, SEG6_ATTR_DST, sizeof(struct in6_addr), in6);
    nlmem_nla_put_u8(sk->nlm_sk, msg, SEG6_ATTR_BIND_OP, SEG6_BIND_SERVICE);
    nlmem_nla_put_u32(sk->nlm_sk, msg, SEG6_ATTR_FLAGS, type);
    nlmem_nla_put(sk->nlm_sk, msg, SEG6_ATTR_BIND_DATA, 0, NULL);
    nlmem_nla_put_u32(sk->nlm_sk, msg, SEG6_ATTR_BIND_DATALEN, 0);

    memset(&cb, 0, sizeof(cb));

    /*
     * user-defined callback for ack: just skip to next packet.
     * default action is to stop processing upon ack reception but
     * we do not want that with binding segment processing
     */
    nlmem_set_cb(&cb, NLMEM_CB_ACK, nlmem_callback, NULL);

    return seg6_send_and_recv(sk, msg, &cb);
}

